Introduction to Web Development with Python and Django

Web
============

  HTTP protocol - Hypertext Transfer Protocol
    - build on top ot TCP (Transmission Control Protocol)
    - function as request-response protocol in client-server computing model
    - stateless protocol, but not sessionless

    URI - Uniform Resource Locators
      - Every HTTP URL conforms to the syntax of a generic URI. A generic URI is of the form:

        scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]

    URLs - Uniform Resource Locators
      - URL is nothing more than the address of a given unique resource on the Web

        protocol://domainname[:port]/path/to/resource/?key1=value1&key2=value2#anchor

    HTTP Request
    - request line (method, path, version)
    - request headers
    - empty line (to end the headers section)
    - request body (optional)

      GET / HTTP/1.1\r\n
      Host: google.com\r\n
      Accept: text/html\r\n
      \r\n

      POST /images/ HTTP/1.1\r\n
      Host: example.com\r\n
      Accept: application/json\r\n
      Content-type: application/json\r\n
      Content-length: 2\r\n
      \r\n
      {}

    - methods - GET/POST/PUT/PATCH/DELETE../HEAD/OPTIONS/..
    - safe methods: GET/HEAD/OPTIONS and TRACE
    - idempotent methods: PUT/DELETE

    HTTP Response
    - status line (version, status code, status message)
    - response headers
    - empty line (to end the headers section)
    - response body (optional)

      HTTP/1.1 200 OK\r\n
      Content-type: text/html\r\n
      Content-length: 15\r\n
      \r\n
      <h1>Hello!</h1>

    - status codes
      1xx Informational
        100 Continue - The server has received the request headers 
                        and the client should proceed to send the request body
      2xx Success
        200: OK
        201: Created
      3xx Redirection
        301: Moved Permanently
        302: Found
      4xx Client errors
        400: Bad Request
        401: Unauthorized
        403: Forbidden
        404: Not Found
      5xx Server errors
        500: Internal Server Error
        502: Bad Gateway

    
Programing
============

  Python
  - interpreted (no compiling)
  - high-level (strong abstraction from the details of the computer)
  - general-purpose programming
  - design philosophy that emphasizes code readability
      Beautiful is better than ugly
      Explicit is better than implicit
      Simple is better than complex
      Complex is better than complicated
      Readability counts
  - features a dynamic type system (allows duck typing)
  - automatic memory management
  - supports multiple programming paradigms, including:
    - object-oriented
    - imperative (statements that change a program's state)
    - functional (declarative programming, avoids changing-state and mutable data)
    - procedural (contain a series of computational steps to be carried out)
  - has a large and comprehensive standard library


  - Built-in Atomic Data Types
    - int
    - float
    - bool
  - Built-in Collection Data Types
    - list
    - string
    - tuple
    - set
    - dictionaries

    arithmetic operators: +, -, *, /, and ** (exponentiation), % (modulo), // integer division, 
    logical operators: and, or, and not.
    relational operators: <, >, ==, !=, <=, >=

  ordered vs unordered
    - ordered: list, string, tuple
    - unordered: set, dictionaries

  mutable vs immutable
    - immutable: int, float, bool, str, tuple, unicode
    - mutable: list, set, dict

  - list
    append              l.append(item)              Adds a new item to the end of a list
    insert              l.insert(i, item)           Inserts an item at the ith position in a list
    pop                 l.pop()                     Removes and returns the last item in a list
    pop                 l.pop(i)                    Removes and returns the ith item in a list
    sort                l.sort()                    Modifies a list to be sorted
    reverse             l.reverse()                 Modifies a list to be in reverse order
    del                 del l[i]                    Deletes the item in the ith position
    index               l.index(item)               Returns the index of the first occurrence of item
    count               l.count(item)               Returns the number of occurrences of item
    remove              l.remove(item)              Removes the first occurrence of item

  - string
    count       s.count(item)     Returns the number of occurrences of item in the string
    lower       s.lower()         Returns a string in all lowercase
    find        s.find(item)      Returns the index of the first occurrence of item
    split       s.split(schar)    Splits a string into substrings at schar


Web Programming
============



Python
============


Django
============


https://defn.io/2018/02/25/web-app-from-scratch-01/






# old
# Web programming
#  - Programming
#    - Language
#      - PHP, Python, JAVA, C#, ...
#    - Architecture
#      - OOP, MVC
#    - Tools
#      - VCS (Version Control Systems)
#        - SVN, git
#      - IDE (Integrated Development Enviroment)
#        - vim, sublime, ...
#    - OS
#      - Linux
#        - bash
#  - Web
#    - pages
#      - html
#    - protocol
#      - http
#        - request(client)
#          - uri(adress)
#            - URL, URN, filename
#          - method
#            - GET/POST/PUT/.../
#          - headers
#          - body
#        - response(server)
#          - status code
#          - headers
#          - body
#    - servers
#      - apache, nginx, uwsgi
#    - Applications
#      - Databases
#        - SQL
#          - MySQL
#      - framework
#        - Django